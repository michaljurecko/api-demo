// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package cmd

import (
	"context"
	"github.com/google/wire"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/ares"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/biz/playerbiz"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/config"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/model/gen"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/server"
	"github.com/michaljurecko/ch-demo/internal/pkg/app/demo/service"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/cachestore"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/dataverse/webapi"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/distlock"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/httpclient"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/log"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/redis"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/shutdown"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/telemetry"
	config2 "github.com/michaljurecko/ch-demo/internal/pkg/common/telemetry/config"
	"github.com/michaljurecko/ch-demo/internal/pkg/common/validate"
)

// Injectors from wire.go:

func NewServer(ctx context.Context) (*server.Server, error) {
	validatorValidate := validate.New()
	configConfig, err := config.Load(validatorValidate)
	if err != nil {
		return nil, err
	}
	config3 := configConfig.Server
	stack := shutdown.NewStack(ctx)
	config4 := configConfig.Logger
	logger, err := log.NewLogger(ctx, stack, config4)
	if err != nil {
		return nil, err
	}
	webapiConfig := configConfig.Model
	config5 := configConfig.Telemetry
	traceConfig := config2.GetTraceConfig(config5)
	tracerProvider, err := telemetry.NewTracerProvider(ctx, logger, stack, traceConfig)
	if err != nil {
		return nil, err
	}
	metricConfig := config2.GetMetricConfig(config5)
	meterProvider, err := telemetry.NewMeterProvider(ctx, logger, stack, metricConfig)
	if err != nil {
		return nil, err
	}
	client := httpclient.New(tracerProvider, meterProvider)
	webapiClient, err := webapi.NewClient(ctx, webapiConfig, client)
	if err != nil {
		return nil, err
	}
	repository := model.NewRepository(webapiClient)
	store, err := cachestore.New()
	if err != nil {
		return nil, err
	}
	aresClient := ares.NewClient(client)
	playerbizService := playerbiz.NewService(aresClient)
	serviceService, err := service.New(ctx, logger, configConfig, repository, store, playerbizService)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.New(config3, serviceService, logger, stack, tracerProvider, meterProvider)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

func NewServerForTest(ctx context.Context, cfgFn config.Decorator) (*server.Server, error) {
	validatorValidate := validate.New()
	configConfig, err := config.ForTest(validatorValidate, cfgFn)
	if err != nil {
		return nil, err
	}
	config3 := configConfig.Server
	stack := shutdown.NewStack(ctx)
	config4 := configConfig.Logger
	logger, err := log.NewLogger(ctx, stack, config4)
	if err != nil {
		return nil, err
	}
	webapiConfig := configConfig.Model
	config5 := configConfig.Telemetry
	traceConfig := config2.GetTraceConfig(config5)
	tracerProvider, err := telemetry.NewTracerProvider(ctx, logger, stack, traceConfig)
	if err != nil {
		return nil, err
	}
	metricConfig := config2.GetMetricConfig(config5)
	meterProvider, err := telemetry.NewMeterProvider(ctx, logger, stack, metricConfig)
	if err != nil {
		return nil, err
	}
	client := httpclient.New(tracerProvider, meterProvider)
	webapiClient, err := webapi.NewClient(ctx, webapiConfig, client)
	if err != nil {
		return nil, err
	}
	repository := model.NewRepository(webapiClient)
	store, err := cachestore.New()
	if err != nil {
		return nil, err
	}
	aresClient := ares.NewClient(client)
	playerbizService := playerbiz.NewService(aresClient)
	serviceService, err := service.New(ctx, logger, configConfig, repository, store, playerbizService)
	if err != nil {
		return nil, err
	}
	serverServer, err := server.New(config3, serviceService, logger, stack, tracerProvider, meterProvider)
	if err != nil {
		return nil, err
	}
	return serverServer, nil
}

// wire.go:

var set = wire.NewSet(log.WireSet, shutdown.WireSet, telemetry.WireSet, validate.WireSet, config.WireSet, httpclient.WireSet, redis.WireSet, cachestore.WireSet, distlock.WireSet, webapi.NewClient, ares.NewClient, model.NewRepository, playerbiz.WireSet, service.New, server.New)
