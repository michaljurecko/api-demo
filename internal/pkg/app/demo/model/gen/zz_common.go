// DO NOT EDIT. Code generated by entitygen. For modifications use "make gen-model".

package model

import (
	"fmt"
	webapi "github.com/michaljurecko/ch-demo/internal/pkg/common/dataverse/webapi"
)

type Repository struct {
	client              *webapi.Client
	characterRepository *CharacterRepository
	classRepository     *ClassRepository
	diceRollRepository  *DiceRollRepository
	playerRepository    *PlayerRepository
	raceRepository      *RaceRepository
}

func NewRepository(client *webapi.Client) *Repository {
	return &Repository{
		client:              client,
		characterRepository: newCharacterRepository(client),
		classRepository:     newClassRepository(client),
		diceRollRepository:  newDiceRollRepository(client),
		playerRepository:    newPlayerRepository(client),
		raceRepository:      newRaceRepository(client)}
}

func (r *Repository) NewChangeSet() *webapi.ChangeSet {
	return webapi.NewChangeSet(r.client)
}

func (r *Repository) Character() *CharacterRepository {
	return r.characterRepository
}

func (r *Repository) Class() *ClassRepository {
	return r.classRepository
}

func (r *Repository) DiceRoll() *DiceRollRepository {
	return r.diceRollRepository
}

func (r *Repository) Player() *PlayerRepository {
	return r.playerRepository
}

func (r *Repository) Race() *RaceRepository {
	return r.raceRepository
}

func lookupFullIDOrNil(v webapi.LookupInterface) (*string, error) {
	if ref := v.ContentIDRef(); ref != nil {
		return ref, nil
	}

	var set string
	switch v.(type) {
	case webapi.Lookup[Character]:
		set = "/cr568_characters"
	case webapi.Lookup[Class]:
		set = "/cr568_classes"
	case webapi.Lookup[DiceRoll]:
		set = "/cr568_dicerolls"
	case webapi.Lookup[Player]:
		set = "/cr568_players"
	case webapi.Lookup[Race]:
		set = "/cr568_races"
	default:
		return nil, fmt.Errorf("unexpected entity type %T", v)
	}

	id := v.ID()
	if id == "" {
		return nil, nil
	}

	fullID := set + "(" + webapi.ID(id) + ")"
	return &fullID, nil
}
