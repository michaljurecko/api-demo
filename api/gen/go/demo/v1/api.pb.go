// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        (unknown)
// source: demo/v1/api.proto

package api

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/google/gnostic/openapiv3"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Class struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	StrengthBase     int32                  `protobuf:"varint,3,opt,name=strength_base,json=strengthBase,proto3" json:"strength_base,omitempty"`
	Description      string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	IntelligenceBase int32                  `protobuf:"varint,5,opt,name=intelligence_base,json=intelligenceBase,proto3" json:"intelligence_base,omitempty"`
	CharismaBase     int32                  `protobuf:"varint,6,opt,name=charisma_base,json=charismaBase,proto3" json:"charisma_base,omitempty"`
	DexterityBase    int32                  `protobuf:"varint,7,opt,name=dexterity_base,json=dexterityBase,proto3" json:"dexterity_base,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Class) Reset() {
	*x = Class{}
	mi := &file_demo_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Class) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Class) ProtoMessage() {}

func (x *Class) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Class.ProtoReflect.Descriptor instead.
func (*Class) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{0}
}

func (x *Class) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Class) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Class) GetStrengthBase() int32 {
	if x != nil {
		return x.StrengthBase
	}
	return 0
}

func (x *Class) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Class) GetIntelligenceBase() int32 {
	if x != nil {
		return x.IntelligenceBase
	}
	return 0
}

func (x *Class) GetCharismaBase() int32 {
	if x != nil {
		return x.CharismaBase
	}
	return 0
}

func (x *Class) GetDexterityBase() int32 {
	if x != nil {
		return x.DexterityBase
	}
	return 0
}

type Race struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	Id               string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description      string                 `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StrengthBase     int32                  `protobuf:"varint,4,opt,name=strength_base,json=strengthBase,proto3" json:"strength_base,omitempty"`
	CharismaBase     int32                  `protobuf:"varint,5,opt,name=charisma_base,json=charismaBase,proto3" json:"charisma_base,omitempty"`
	IntelligenceBase int32                  `protobuf:"varint,6,opt,name=intelligence_base,json=intelligenceBase,proto3" json:"intelligence_base,omitempty"`
	DexterityBase    int32                  `protobuf:"varint,7,opt,name=dexterity_base,json=dexterityBase,proto3" json:"dexterity_base,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Race) Reset() {
	*x = Race{}
	mi := &file_demo_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Race) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Race) ProtoMessage() {}

func (x *Race) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Race.ProtoReflect.Descriptor instead.
func (*Race) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{1}
}

func (x *Race) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Race) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Race) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Race) GetStrengthBase() int32 {
	if x != nil {
		return x.StrengthBase
	}
	return 0
}

func (x *Race) GetCharismaBase() int32 {
	if x != nil {
		return x.CharismaBase
	}
	return 0
}

func (x *Race) GetIntelligenceBase() int32 {
	if x != nil {
		return x.IntelligenceBase
	}
	return 0
}

func (x *Race) GetDexterityBase() int32 {
	if x != nil {
		return x.DexterityBase
	}
	return 0
}

type ListClassesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Classes       []*Class               `protobuf:"bytes,1,rep,name=classes,proto3" json:"classes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClassesResponse) Reset() {
	*x = ListClassesResponse{}
	mi := &file_demo_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClassesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClassesResponse) ProtoMessage() {}

func (x *ListClassesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClassesResponse.ProtoReflect.Descriptor instead.
func (*ListClassesResponse) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *ListClassesResponse) GetClasses() []*Class {
	if x != nil {
		return x.Classes
	}
	return nil
}

type ListRacesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Races         []*Race                `protobuf:"bytes,1,rep,name=races,proto3" json:"races,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRacesResponse) Reset() {
	*x = ListRacesResponse{}
	mi := &file_demo_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRacesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRacesResponse) ProtoMessage() {}

func (x *ListRacesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRacesResponse.ProtoReflect.Descriptor instead.
func (*ListRacesResponse) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *ListRacesResponse) GetRaces() []*Race {
	if x != nil {
		return x.Races
	}
	return nil
}

type Player struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	FirstName     string                 `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone         string                 `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Ic            string                 `protobuf:"bytes,14,opt,name=ic,proto3" json:"ic,omitempty"`
	Address       string                 `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty"`
	VatId         string                 `protobuf:"bytes,16,opt,name=vat_id,json=vatId,proto3" json:"vat_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Player) Reset() {
	*x = Player{}
	mi := &file_demo_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Player) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Player) ProtoMessage() {}

func (x *Player) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Player.ProtoReflect.Descriptor instead.
func (*Player) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *Player) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Player) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Player) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Player) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *Player) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Player) GetIc() string {
	if x != nil {
		return x.Ic
	}
	return ""
}

func (x *Player) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Player) GetVatId() string {
	if x != nil {
		return x.VatId
	}
	return ""
}

type CreatePlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FirstName     string                 `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone         string                 `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Ic            string                 `protobuf:"bytes,14,opt,name=ic,proto3" json:"ic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatePlayerRequest) Reset() {
	*x = CreatePlayerRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatePlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePlayerRequest) ProtoMessage() {}

func (x *CreatePlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePlayerRequest.ProtoReflect.Descriptor instead.
func (*CreatePlayerRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *CreatePlayerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *CreatePlayerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *CreatePlayerRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreatePlayerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CreatePlayerRequest) GetIc() string {
	if x != nil {
		return x.Ic
	}
	return ""
}

type UpdatePlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	FirstName     string                 `protobuf:"bytes,10,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	LastName      string                 `protobuf:"bytes,11,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	Phone         string                 `protobuf:"bytes,12,opt,name=phone,proto3" json:"phone,omitempty"`
	Email         string                 `protobuf:"bytes,13,opt,name=email,proto3" json:"email,omitempty"`
	Ic            string                 `protobuf:"bytes,14,opt,name=ic,proto3" json:"ic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdatePlayerRequest) Reset() {
	*x = UpdatePlayerRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdatePlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePlayerRequest) ProtoMessage() {}

func (x *UpdatePlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePlayerRequest.ProtoReflect.Descriptor instead.
func (*UpdatePlayerRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePlayerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdatePlayerRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdatePlayerRequest) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *UpdatePlayerRequest) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *UpdatePlayerRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *UpdatePlayerRequest) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UpdatePlayerRequest) GetIc() string {
	if x != nil {
		return x.Ic
	}
	return ""
}

type DeletePlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeletePlayerRequest) Reset() {
	*x = DeletePlayerRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeletePlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePlayerRequest) ProtoMessage() {}

func (x *DeletePlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePlayerRequest.ProtoReflect.Descriptor instead.
func (*DeletePlayerRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *DeletePlayerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetPlayerRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPlayerRequest) Reset() {
	*x = GetPlayerRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPlayerRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPlayerRequest) ProtoMessage() {}

func (x *GetPlayerRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPlayerRequest.ProtoReflect.Descriptor instead.
func (*GetPlayerRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *GetPlayerRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type Character struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Id    string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name  string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// int32 level = 3 [
	//
	//	(buf.validate.field).int32.gte = 1,
	//	(buf.validate.field).int32.lte = 20
	//
	// ];
	Strength      int32  `protobuf:"varint,4,opt,name=strength,proto3" json:"strength,omitempty"`
	Dexterity     int32  `protobuf:"varint,5,opt,name=dexterity,proto3" json:"dexterity,omitempty"`
	Intelligence  int32  `protobuf:"varint,6,opt,name=intelligence,proto3" json:"intelligence,omitempty"`
	Charisma      int32  `protobuf:"varint,7,opt,name=charisma,proto3" json:"charisma,omitempty"`
	ClassId       string `protobuf:"bytes,8,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	RaceId        string `protobuf:"bytes,9,opt,name=race_id,json=raceId,proto3" json:"race_id,omitempty"`
	PlayerId      string `protobuf:"bytes,10,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Character) Reset() {
	*x = Character{}
	mi := &file_demo_v1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *Character) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetStrength() int32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *Character) GetDexterity() int32 {
	if x != nil {
		return x.Dexterity
	}
	return 0
}

func (x *Character) GetIntelligence() int32 {
	if x != nil {
		return x.Intelligence
	}
	return 0
}

func (x *Character) GetCharisma() int32 {
	if x != nil {
		return x.Charisma
	}
	return 0
}

func (x *Character) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *Character) GetRaceId() string {
	if x != nil {
		return x.RaceId
	}
	return ""
}

func (x *Character) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type ListPlayersAndCharactersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Players       []*CharactersPerPlayer `protobuf:"bytes,1,rep,name=players,proto3" json:"players,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListPlayersAndCharactersResponse) Reset() {
	*x = ListPlayersAndCharactersResponse{}
	mi := &file_demo_v1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListPlayersAndCharactersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPlayersAndCharactersResponse) ProtoMessage() {}

func (x *ListPlayersAndCharactersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPlayersAndCharactersResponse.ProtoReflect.Descriptor instead.
func (*ListPlayersAndCharactersResponse) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *ListPlayersAndCharactersResponse) GetPlayers() []*CharactersPerPlayer {
	if x != nil {
		return x.Players
	}
	return nil
}

type CharactersPerPlayer struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Player        *Player                `protobuf:"bytes,1,opt,name=player,proto3" json:"player,omitempty"`
	Characters    []*Character           `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CharactersPerPlayer) Reset() {
	*x = CharactersPerPlayer{}
	mi := &file_demo_v1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CharactersPerPlayer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharactersPerPlayer) ProtoMessage() {}

func (x *CharactersPerPlayer) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharactersPerPlayer.ProtoReflect.Descriptor instead.
func (*CharactersPerPlayer) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *CharactersPerPlayer) GetPlayer() *Player {
	if x != nil {
		return x.Player
	}
	return nil
}

func (x *CharactersPerPlayer) GetCharacters() []*Character {
	if x != nil {
		return x.Characters
	}
	return nil
}

type CreateCharacterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// int32 level = 4 [
	//
	//	(buf.validate.field).int32.gte = 1,
	//	(buf.validate.field).int32.lte = 20
	//
	// ];
	Strength      int32  `protobuf:"varint,5,opt,name=strength,proto3" json:"strength,omitempty"`
	Dexterity     int32  `protobuf:"varint,6,opt,name=dexterity,proto3" json:"dexterity,omitempty"`
	Intelligence  int32  `protobuf:"varint,7,opt,name=intelligence,proto3" json:"intelligence,omitempty"`
	Charisma      int32  `protobuf:"varint,8,opt,name=charisma,proto3" json:"charisma,omitempty"`
	ClassId       string `protobuf:"bytes,9,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	RaceId        string `protobuf:"bytes,10,opt,name=race_id,json=raceId,proto3" json:"race_id,omitempty"`
	PlayerId      string `protobuf:"bytes,11,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCharacterRequest) Reset() {
	*x = CreateCharacterRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCharacterRequest) ProtoMessage() {}

func (x *CreateCharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCharacterRequest.ProtoReflect.Descriptor instead.
func (*CreateCharacterRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *CreateCharacterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCharacterRequest) GetStrength() int32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *CreateCharacterRequest) GetDexterity() int32 {
	if x != nil {
		return x.Dexterity
	}
	return 0
}

func (x *CreateCharacterRequest) GetIntelligence() int32 {
	if x != nil {
		return x.Intelligence
	}
	return 0
}

func (x *CreateCharacterRequest) GetCharisma() int32 {
	if x != nil {
		return x.Charisma
	}
	return 0
}

func (x *CreateCharacterRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *CreateCharacterRequest) GetRaceId() string {
	if x != nil {
		return x.RaceId
	}
	return ""
}

func (x *CreateCharacterRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type UpdateCharacterRequest struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Id         string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UpdateMask *fieldmaskpb.FieldMask `protobuf:"bytes,2,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	Name       string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// int32 level = 4 [
	//
	//	(buf.validate.field).int32.gte = 1,
	//	(buf.validate.field).int32.lte = 20
	//
	// ];
	Strength      int32  `protobuf:"varint,5,opt,name=strength,proto3" json:"strength,omitempty"`
	Dexterity     int32  `protobuf:"varint,6,opt,name=dexterity,proto3" json:"dexterity,omitempty"`
	Intelligence  int32  `protobuf:"varint,7,opt,name=intelligence,proto3" json:"intelligence,omitempty"`
	Charisma      int32  `protobuf:"varint,8,opt,name=charisma,proto3" json:"charisma,omitempty"`
	ClassId       string `protobuf:"bytes,9,opt,name=class_id,json=classId,proto3" json:"class_id,omitempty"`
	RaceId        string `protobuf:"bytes,10,opt,name=race_id,json=raceId,proto3" json:"race_id,omitempty"`
	PlayerId      string `protobuf:"bytes,11,opt,name=player_id,json=playerId,proto3" json:"player_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCharacterRequest) Reset() {
	*x = UpdateCharacterRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCharacterRequest) ProtoMessage() {}

func (x *UpdateCharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCharacterRequest.ProtoReflect.Descriptor instead.
func (*UpdateCharacterRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateCharacterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UpdateCharacterRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateCharacterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateCharacterRequest) GetStrength() int32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *UpdateCharacterRequest) GetDexterity() int32 {
	if x != nil {
		return x.Dexterity
	}
	return 0
}

func (x *UpdateCharacterRequest) GetIntelligence() int32 {
	if x != nil {
		return x.Intelligence
	}
	return 0
}

func (x *UpdateCharacterRequest) GetCharisma() int32 {
	if x != nil {
		return x.Charisma
	}
	return 0
}

func (x *UpdateCharacterRequest) GetClassId() string {
	if x != nil {
		return x.ClassId
	}
	return ""
}

func (x *UpdateCharacterRequest) GetRaceId() string {
	if x != nil {
		return x.RaceId
	}
	return ""
}

func (x *UpdateCharacterRequest) GetPlayerId() string {
	if x != nil {
		return x.PlayerId
	}
	return ""
}

type DeleteCharacterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteCharacterRequest) Reset() {
	*x = DeleteCharacterRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteCharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCharacterRequest) ProtoMessage() {}

func (x *DeleteCharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCharacterRequest.ProtoReflect.Descriptor instead.
func (*DeleteCharacterRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteCharacterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetCharacterRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCharacterRequest) Reset() {
	*x = GetCharacterRequest{}
	mi := &file_demo_v1_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCharacterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCharacterRequest) ProtoMessage() {}

func (x *GetCharacterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_demo_v1_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCharacterRequest.ProtoReflect.Descriptor instead.
func (*GetCharacterRequest) Descriptor() ([]byte, []int) {
	return file_demo_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *GetCharacterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_demo_v1_api_proto protoreflect.FileDescriptor

var file_demo_v1_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x64, 0x65, 0x6d, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x02, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba,
	0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x07, 0x57, 0x61, 0x72,
	0x72, 0x69, 0x6f, 0x72, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x61, 0x73, 0x65, 0x12,
	0x57, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xba, 0x48, 0x32, 0x72, 0x30, 0x10, 0x01, 0x18, 0xf4, 0x03,
	0x92, 0x02, 0x28, 0x41, 0x20, 0x62, 0x72, 0x61, 0x76, 0x65, 0x20, 0x77, 0x61, 0x72, 0x72, 0x69,
	0x6f, 0x72, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x75, 0x6e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x64, 0x20, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x61, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x42, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x22, 0xed, 0x02, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92,
	0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d,
	0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x72, 0x0a, 0x10,
	0x01, 0x18, 0x64, 0x92, 0x02, 0x03, 0x45, 0x6c, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x62, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x40, 0xba, 0x48, 0x3d, 0x72, 0x3b, 0x10, 0x01, 0x18, 0xf4, 0x03,
	0x92, 0x02, 0x33, 0x41, 0x20, 0x6d, 0x79, 0x73, 0x74, 0x69, 0x63, 0x61, 0x6c, 0x20, 0x72, 0x61,
	0x63, 0x65, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x68, 0x69, 0x67, 0x68, 0x20, 0x69, 0x6e, 0x74,
	0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x61, 0x67,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x5f,
	0x62, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x42, 0x61, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72,
	0x69, 0x73, 0x6d, 0x61, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x42, 0x61, 0x73, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x62, 0x61,
	0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x42, 0x61, 0x73,
	0x65, 0x22, 0x3f, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x07, 0x63, 0x6c, 0x61, 0x73,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x65, 0x73, 0x22, 0x38, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x05, 0x72, 0x61, 0x63, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x05, 0x72, 0x61, 0x63, 0x65, 0x73, 0x22, 0x9f, 0x03, 0x0a,
	0x06, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d,
	0x72, 0x0b, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x04, 0x4a, 0x6f, 0x68, 0x6e, 0x52, 0x09, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e,
	0x72, 0x0c, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x05, 0x42, 0x72, 0x6f, 0x77, 0x6e, 0x52, 0x08,
	0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17, 0x72, 0x15, 0xc8, 0xe5,
	0xe7, 0x03, 0x01, 0x92, 0x02, 0x0d, 0x2b, 0x34, 0x32, 0x31, 0x39, 0x30, 0x35, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02,
	0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x63, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x12, 0x72, 0x10, 0xd0, 0xe5, 0xe7, 0x03,
	0x01, 0x92, 0x02, 0x08, 0x32, 0x35, 0x35, 0x39, 0x36, 0x36, 0x34, 0x31, 0x52, 0x02, 0x69, 0x63,
	0x12, 0x4c, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x32, 0xba, 0x48, 0x2f, 0x72, 0x2d, 0x10, 0x01, 0x18, 0xc8, 0x01, 0x92, 0x02, 0x25,
	0x4e, 0x61, 0x20, 0x50, 0xc5, 0x99, 0xc3, 0xad, 0x6b, 0x6f, 0x70, 0xc4, 0x9b, 0x20, 0x31, 0x32,
	0x33, 0x2f, 0x34, 0x35, 0x2c, 0x20, 0x50, 0x72, 0x61, 0x68, 0x61, 0x20, 0x31, 0x2c, 0x20, 0x31,
	0x31, 0x30, 0x20, 0x30, 0x30, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2e,
	0x0a, 0x06, 0x76, 0x61, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17,
	0xba, 0x48, 0x14, 0x72, 0x12, 0xd8, 0xe5, 0xe7, 0x03, 0x01, 0x92, 0x02, 0x0a, 0x43, 0x5a, 0x32,
	0x35, 0x35, 0x39, 0x36, 0x36, 0x34, 0x31, 0x52, 0x05, 0x76, 0x61, 0x74, 0x49, 0x64, 0x22, 0xee,
	0x01, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xba, 0x48, 0x0d, 0x72,
	0x0b, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x04, 0x4a, 0x6f, 0x68, 0x6e, 0x52, 0x09, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x11, 0xba, 0x48, 0x0e, 0x72,
	0x0c, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x05, 0x42, 0x72, 0x6f, 0x77, 0x6e, 0x52, 0x08, 0x6c,
	0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17, 0x72, 0x15, 0xc8, 0xe5, 0xe7,
	0x03, 0x01, 0x92, 0x02, 0x0d, 0x2b, 0x34, 0x32, 0x31, 0x39, 0x30, 0x35, 0x31, 0x32, 0x33, 0x34,
	0x35, 0x36, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x60,
	0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a, 0x02, 0x69, 0x63, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x12, 0x72, 0x10, 0xd0, 0xe5, 0xe7, 0x03, 0x01,
	0x92, 0x02, 0x08, 0x32, 0x35, 0x35, 0x39, 0x36, 0x36, 0x34, 0x31, 0x52, 0x02, 0x69, 0x63, 0x22,
	0xd2, 0x02, 0x0a, 0x13, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x49, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x42, 0x0c, 0xba, 0x47, 0x09, 0xca, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2f, 0x0a, 0x0a, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x10, 0xba, 0x48, 0x0d, 0x72, 0x0b, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x04, 0x4a, 0x6f, 0x68,
	0x6e, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x09,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x11, 0xba, 0x48, 0x0e, 0x72, 0x0c, 0x10, 0x01, 0x18, 0x32, 0x92, 0x02, 0x05, 0x42, 0x72, 0x6f,
	0x77, 0x6e, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xba, 0x48, 0x17,
	0x72, 0x15, 0xc8, 0xe5, 0xe7, 0x03, 0x01, 0x92, 0x02, 0x0d, 0x2b, 0x34, 0x32, 0x31, 0x39, 0x30,
	0x35, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x1d,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x60, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x25, 0x0a,
	0x02, 0x69, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xba, 0x48, 0x12, 0x72, 0x10,
	0xd0, 0xe5, 0xe7, 0x03, 0x01, 0x92, 0x02, 0x08, 0x32, 0x35, 0x35, 0x39, 0x36, 0x36, 0x34, 0x31,
	0x52, 0x02, 0x69, 0x63, 0x22, 0x55, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01,
	0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b,
	0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d,
	0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x22,
	0xfb, 0x03, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29,
	0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30,
	0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x12, 0x27, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10,
	0x72, 0x0e, 0x10, 0x01, 0x18, 0x64, 0x92, 0x02, 0x07, 0x47, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x66,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18,
	0x64, 0x28, 0x01, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a,
	0x09, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c,
	0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48,
	0x06, 0x1a, 0x04, 0x18, 0x64, 0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69,
	0x67, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d,
	0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x64,
	0x28, 0x01, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x08,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x07,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10,
	0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x4b, 0x0a, 0x09, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x31, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x5a, 0x0a,
	0x20, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x36, 0x0a, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x52, 0x07, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x22, 0x72, 0x0a, 0x13, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x50, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x12, 0x27, 0x0a, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65,
	0x72, 0x52, 0x06, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0xc8, 0x03,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x10, 0x01, 0x18,
	0x64, 0x92, 0x02, 0x07, 0x47, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x64, 0x65, 0x78, 0x74,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06,
	0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14,
	0x28, 0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x08, 0x63,
	0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29,
	0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30,
	0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73,
	0x49, 0x64, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x31, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e,
	0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x08,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0xac, 0x04, 0x0a, 0x16, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x10, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x49, 0x0a, 0x0b,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x0c, 0xba,
	0x47, 0x09, 0xca, 0x01, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x27, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xba, 0x48, 0x10, 0x72, 0x0e, 0x10, 0x01, 0x18, 0x64,
	0x92, 0x02, 0x07, 0x47, 0x61, 0x6e, 0x64, 0x61, 0x6c, 0x66, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x09, 0x64, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a,
	0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x09, 0x64, 0x65, 0x78, 0x74, 0x65, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28,
	0x01, 0x52, 0x0c, 0x69, 0x6e, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x67, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x25, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x09, 0xba, 0x48, 0x06, 0x1a, 0x04, 0x18, 0x14, 0x28, 0x01, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x72, 0x69, 0x73, 0x6d, 0x61, 0x12, 0x49, 0x0a, 0x08, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10,
	0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x07, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x49,
	0x64, 0x12, 0x47, 0x0a, 0x07, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x31, 0x52, 0x06, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x4b, 0x0a, 0x09, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba,
	0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x08, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x49, 0x64, 0x22, 0x58, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba,
	0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30,
	0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x55, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xba, 0x48, 0x2b, 0x72, 0x29, 0x10, 0x01, 0x92, 0x02, 0x24,
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30,
	0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x2d, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,
	0x30, 0x30, 0x30, 0x31, 0x52, 0x02, 0x69, 0x64, 0x32, 0x8c, 0x06, 0x0a, 0x0a, 0x41, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x43,
	0x6c, 0x61, 0x73, 0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1c,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6c, 0x61,
	0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x09,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x1a, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x61, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x0c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x64, 0x65,
	0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x37, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x19,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x5d, 0x0a, 0x18, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x29,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65,
	0x72, 0x12, 0x46, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x40, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x55, 0xba, 0x47, 0x19, 0x1a, 0x17, 0x0a, 0x15,
	0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74,
	0x3a, 0x38, 0x30, 0x30, 0x30, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x6d, 0x69, 0x63, 0x68, 0x61, 0x6c, 0x6a, 0x75, 0x72, 0x65, 0x63, 0x6b, 0x6f, 0x2f,
	0x63, 0x68, 0x2d, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f,
	0x67, 0x6f, 0x2f, 0x64, 0x65, 0x6d, 0x6f, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_demo_v1_api_proto_rawDescOnce sync.Once
	file_demo_v1_api_proto_rawDescData = file_demo_v1_api_proto_rawDesc
)

func file_demo_v1_api_proto_rawDescGZIP() []byte {
	file_demo_v1_api_proto_rawDescOnce.Do(func() {
		file_demo_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_demo_v1_api_proto_rawDescData)
	})
	return file_demo_v1_api_proto_rawDescData
}

var file_demo_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_demo_v1_api_proto_goTypes = []any{
	(*Class)(nil),                            // 0: demo.v1.Class
	(*Race)(nil),                             // 1: demo.v1.Race
	(*ListClassesResponse)(nil),              // 2: demo.v1.ListClassesResponse
	(*ListRacesResponse)(nil),                // 3: demo.v1.ListRacesResponse
	(*Player)(nil),                           // 4: demo.v1.Player
	(*CreatePlayerRequest)(nil),              // 5: demo.v1.CreatePlayerRequest
	(*UpdatePlayerRequest)(nil),              // 6: demo.v1.UpdatePlayerRequest
	(*DeletePlayerRequest)(nil),              // 7: demo.v1.DeletePlayerRequest
	(*GetPlayerRequest)(nil),                 // 8: demo.v1.GetPlayerRequest
	(*Character)(nil),                        // 9: demo.v1.Character
	(*ListPlayersAndCharactersResponse)(nil), // 10: demo.v1.ListPlayersAndCharactersResponse
	(*CharactersPerPlayer)(nil),              // 11: demo.v1.CharactersPerPlayer
	(*CreateCharacterRequest)(nil),           // 12: demo.v1.CreateCharacterRequest
	(*UpdateCharacterRequest)(nil),           // 13: demo.v1.UpdateCharacterRequest
	(*DeleteCharacterRequest)(nil),           // 14: demo.v1.DeleteCharacterRequest
	(*GetCharacterRequest)(nil),              // 15: demo.v1.GetCharacterRequest
	(*fieldmaskpb.FieldMask)(nil),            // 16: google.protobuf.FieldMask
	(*emptypb.Empty)(nil),                    // 17: google.protobuf.Empty
}
var file_demo_v1_api_proto_depIdxs = []int32{
	0,  // 0: demo.v1.ListClassesResponse.classes:type_name -> demo.v1.Class
	1,  // 1: demo.v1.ListRacesResponse.races:type_name -> demo.v1.Race
	16, // 2: demo.v1.UpdatePlayerRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 3: demo.v1.ListPlayersAndCharactersResponse.players:type_name -> demo.v1.CharactersPerPlayer
	4,  // 4: demo.v1.CharactersPerPlayer.player:type_name -> demo.v1.Player
	9,  // 5: demo.v1.CharactersPerPlayer.characters:type_name -> demo.v1.Character
	16, // 6: demo.v1.UpdateCharacterRequest.update_mask:type_name -> google.protobuf.FieldMask
	17, // 7: demo.v1.ApiService.ListClasses:input_type -> google.protobuf.Empty
	17, // 8: demo.v1.ApiService.ListRaces:input_type -> google.protobuf.Empty
	5,  // 9: demo.v1.ApiService.CreatePlayer:input_type -> demo.v1.CreatePlayerRequest
	6,  // 10: demo.v1.ApiService.UpdatePlayer:input_type -> demo.v1.UpdatePlayerRequest
	7,  // 11: demo.v1.ApiService.DeletePlayer:input_type -> demo.v1.DeletePlayerRequest
	8,  // 12: demo.v1.ApiService.GetPlayer:input_type -> demo.v1.GetPlayerRequest
	17, // 13: demo.v1.ApiService.ListPlayersAndCharacters:input_type -> google.protobuf.Empty
	12, // 14: demo.v1.ApiService.CreateCharacter:input_type -> demo.v1.CreateCharacterRequest
	13, // 15: demo.v1.ApiService.UpdateCharacter:input_type -> demo.v1.UpdateCharacterRequest
	14, // 16: demo.v1.ApiService.DeleteCharacter:input_type -> demo.v1.DeleteCharacterRequest
	15, // 17: demo.v1.ApiService.GetCharacter:input_type -> demo.v1.GetCharacterRequest
	2,  // 18: demo.v1.ApiService.ListClasses:output_type -> demo.v1.ListClassesResponse
	3,  // 19: demo.v1.ApiService.ListRaces:output_type -> demo.v1.ListRacesResponse
	4,  // 20: demo.v1.ApiService.CreatePlayer:output_type -> demo.v1.Player
	4,  // 21: demo.v1.ApiService.UpdatePlayer:output_type -> demo.v1.Player
	17, // 22: demo.v1.ApiService.DeletePlayer:output_type -> google.protobuf.Empty
	4,  // 23: demo.v1.ApiService.GetPlayer:output_type -> demo.v1.Player
	10, // 24: demo.v1.ApiService.ListPlayersAndCharacters:output_type -> demo.v1.ListPlayersAndCharactersResponse
	9,  // 25: demo.v1.ApiService.CreateCharacter:output_type -> demo.v1.Character
	9,  // 26: demo.v1.ApiService.UpdateCharacter:output_type -> demo.v1.Character
	17, // 27: demo.v1.ApiService.DeleteCharacter:output_type -> google.protobuf.Empty
	9,  // 28: demo.v1.ApiService.GetCharacter:output_type -> demo.v1.Character
	18, // [18:29] is the sub-list for method output_type
	7,  // [7:18] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_demo_v1_api_proto_init() }
func file_demo_v1_api_proto_init() {
	if File_demo_v1_api_proto != nil {
		return
	}
	file_demo_v1_validate_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_demo_v1_api_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_demo_v1_api_proto_goTypes,
		DependencyIndexes: file_demo_v1_api_proto_depIdxs,
		MessageInfos:      file_demo_v1_api_proto_msgTypes,
	}.Build()
	File_demo_v1_api_proto = out.File
	file_demo_v1_api_proto_rawDesc = nil
	file_demo_v1_api_proto_goTypes = nil
	file_demo_v1_api_proto_depIdxs = nil
}
